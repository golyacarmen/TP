// Să se determine, pentru fiecare linie, cea mai mică valoare care se poate obține adunând elementele de pe linie, cu excepția unuia.

#include <stdio.h>
#include <stdlib.h>

#define MAX 100

int sum_linie(int *v, int m)
{
  int max_value = v[0];
  for(int i = 0; i<m; i++)
    {
      if(v[i] > max_value)
	{
	  max_value = v[i];
	}
    }
  int suma = 0;
  for(int i = 0; i<m; i++)
    {
      suma += v[i];
    }
  suma -= max_value;
  return suma;
}

int *sum_matrice(int **a, int n, int m)
{
  int *v = NULL;
  v = (int *)malloc(sizeof(int) * n);
  for(int i = 0; i<n; i++)
    {
      v[i] = sum_linie(a[i], m);
    }
  return v;
}

int main(void)
{
  int n = 0; // nr randuri
  int m = 0; // nr coloane
  printf("nr linii si nr coloane: ");
  scanf("%d %d", &n, &m);
  if(n>100 || m>100)
    {
      printf("valori invalide\n");
      exit(-1);
    }

  int **a;
  a = (int **)malloc(sizeof(int *) * n);
  for(int i = 0; i<n; i++)
    {
      a[i] = (int *)malloc(sizeof(int) * m);
    }

  for(int i = 0; i<n; i++)
    {
      for(int j = 0; j<m; j++)
	{
	  a[i][j] = i+j;
	}
    }

  for(int i = 0; i<n; i++)
    {
      for(int j = 0; j<m; j++)
	{
	  printf("%d ", a[i][j]);
	}
      printf("\n");
    }
  
  int *v = sum_matrice(a, n, m);

  for(int i = 0; i<n; i++)
    {
      printf("%d. %d\n", i, v[i]);
    }
  
  for(int i = 0; i<n; i++)
    {
      free(a[i]);
    }
  free(a);
  free(v);
  return 0;
}
